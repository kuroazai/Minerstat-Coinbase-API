# -*- coding: utf-8 -*-
"""
Created on Fri Nov 26 10:29:44 2021

@author: KuroAzai
"""
import requests
import json
from datetime import datetime


def get_workers(access_key):
    '''
    Gets all worker on minerstat acccount

    Parameters
    ----------
    access_key : str
        your access key to your account.

    Returns
    -------
    message : str
        calculated net profit after all expenses.

    '''
    url = 'https://api.minerstat.com/v2/stats/{}'.format(access_key)
    data = requests.get(url)
    data = json.loads(data.content)
    with open('workers.json', 'w') as json_file:
        json.dump(data, json_file)
    overall = 0
    # exchange
    url = 'https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=GBP'
    exchange = requests.get(url)
    exchange = json.loads(exchange.content)
    # gas price
    url = 'https://ethgasstation.info/json/ethgasAPI.json'
    gwei_data = requests.get(url)
    gwei_data = json.loads(gwei_data.content)

    gwei_ethprice = ((gwei_data['average'] / 10) * 21000) * 0.000000001
    gwei_ethprice = gwei_ethprice * 2
    rate = 1 / exchange['GBP']
    message = ''
    for x in data:
        print(x)
        message += worker_statistics(access_key, x, len(data) - 1, rate, gwei_ethprice)
    print(message)
    return message


def get_worker(access_key, worker):
    '''
    Retreives data for an individual worker

    Parameters
    ----------
    access_key : str
        your access key to your account.
    worker : str
        the name of the worker we want to check.

    Returns
    -------
    None.

    '''
    url = 'https://api.minerstat.com/v2/stats/{}/{}'.format(access_key, worker)
    data = requests.get(url)
    data = json.loads(data.content)
    return


def global_stats(access_key):
    '''

    Parameters
    ----------
    access_key : str
        your access key to your account.

    Returns
    -------
    None.

    '''
    url = 'https://api.minerstat.com/v2/stats-global/{}?timezone=Europe/Tallinn'.format(access_key)
    data = requests.get(url)
    data = json.loads(data.content)
    with open('worker_global.json', 'w') as json_file:
        json.dump(data, json_file)
    # Filled with group names avaliable on your minerstat!
    clients = ['', '', '', '']
    new_dict = {}
    for x in clients:
        #print(x)
        selection = data['groups'][x]
        # print(len(selection))
        for y in selection:
            dt_object = datetime.fromtimestamp(int(y)).strftime('%y-%m-%d')
            if x in new_dict:
                pass
            else:
                new_dict[x] = {}

            if dt_object in new_dict[x]:
                new_dict[x][dt_object].append(selection[y])
            else:
                new_dict[x][dt_object] = [selection[y]]

    with open('worker_global.json', 'w') as json_file:
        json.dump(new_dict, json_file)


def convert_unix(data, worker):
    '''
    Converts unix time to readable time and offsets by n number of days
    to calcualte average profit for each of the days

    Parameters
    ----------
    data : list
        list containing the unixtime frame and crypto reward for that particular hour/minute.
    worker : str
        name of the worker.

    Returns
    -------
    total : float
        the total amount of money generated by that worker.

    '''
    new_dict = {}
    for y in data:
        dt_object = datetime.fromtimestamp(int(y[0] * 100)).strftime('%y-%m-%d')
        if worker in new_dict:
            pass
        else:
            new_dict[worker] = {}
        if len(y[1]):
            if dt_object in new_dict[worker]:
                new_dict[worker][dt_object].append(y[1][0][1])
            else:
                new_dict[worker][dt_object] = [y[1][0][1]]
    dates = list(new_dict[worker])
    dates = dates[len(dates)-15:len(dates)]
    fullcycle = 144
    mult = 0.69
    total = 0
    for x in dates:
        work = (len(new_dict[worker][x]) * mult) * 0.01
        # print(work)
        # calculate average
        smm = sum(new_dict[worker][x])
        total += (smm / len(new_dict[worker][x])) * work
    with open('worker_{}.json'.format(worker), 'w') as json_file:
        json.dump(new_dict, json_file)
    return total


def worker_statistics(access_key, worker, poolsize, rate, gwei_ethprice):
    '''


    Parameters
    ----------
    access_key : TYPE
        DESCRIPTION.
    worker : str
        name of the worker.
    poolsize : int
        number of clients/individuals on the account.
    rate : float
        eth to gbp rate.
    gwei_ethprice : float
        the current price of gwei.

    Returns
    -------
    str
        a formatted message containing all the workers profits.

    '''
    global TOTAL_OVERALL
    url = 'https://api.minerstat.com/v2/stats-worker/{}/{}?timezone=Europe/Tallinn'.format(access_key, worker)
    data = requests.get(url)
    data = json.loads(data.content)

    with open('workerstats.json', 'w') as json_file:
        json.dump(data, json_file)
    # print(data)
    # calculate payout
    ETHPayouts = data['data'][2]
    # compile data
    total_eth = convert_unix(ETHPayouts, worker)

    payout = (total_eth / rate) - (total_eth / rate * 0.02)
    TOTAL_OVERALL += payout
    # print('initial', total_eth / rate)
    return ('\nClient : {}\nWorker Name : {}\nPayout(2% Network Tax + Gwei) GBP :  Â£{} \nGwei Price : {}\n'.format(data['data'][1][2],
                                                                                                                   data['data'][0],
                                                                                                                   payout - ((gwei_ethprice / 4) / rate),
                                                                                                                   (gwei_ethprice / 4) / rate))

TOTAL_OVERALL = 0
